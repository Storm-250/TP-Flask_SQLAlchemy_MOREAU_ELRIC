from flask import Blueprint, render_template, redirect, url_for,jsonify, request

from .model import  Reservation, Chambre,Client
from .database import db
main = Blueprint('main', __name__)


#routes recuperation client
@main.route('/api/clients', methods=['GET'])
def recuperation_client():
    clients=Client.query.all()
    value=[]


    for client in clients:
        value.append(
            {
                "id":client.id,
                "nom":client.nom,
                "email":client.email
            }
        )
            
    return jsonify(value)

#routes création client
@main.route('/api/clients', methods=['POST'])
def creation_client():  
    id =request.json['id']
    nom =request.json['nom']
    email =request.json['email']
    
    new_client = Client(
        id = id,
        nom = nom,
        email = email,
        )
    db.session.add(new_client)
    db.session.commit()
    return jsonify({'message':'Nouveau Client ajouter'})



#routes recuperation client
@main.route('/api/reservations', methods=['GET'])
def recuperation_reservation():
    reservations=Reservation.query.all()
    value=[]


    for reservation in reservations:
        value.append(
            {
                "id":reservation.id_client,
                "id_chambre":reservation.id_chambre,
                "date_arrive":reservation.date_arrive,
                "date_depart":reservation.date_depart

            }
        )



#routes création resservation
@main.route('/api/reservations', methods=['POST'])
def reservation():
    id_client =request.json['id_client']
    id_chambre =request.json['id_chambre']
    date_arrive =request.json['date_arriver']
    date_depart =request.json['date_depart']

    new_reservation = Reservation(
        id_client = id_client,
        id_chambre = id_chambre,
        date_arrive = date_arrive,
        date_depart = date_depart
        )
    db.session.add(new_reservation)
    db.session.commit()
    return jsonify({'message':'reservation faite'})


#routes suppression resservatin

@main.route('/api/reservations/<int:id>', methods=['DELETE'])
def reservation_annulation(id):
    reservation=reservation.query.get_or_404(id)
    db.session.delete(reservation)
    db.session.commit()
    return jsonify({'message':'Reservation SUPPRIME'})


#routes liste des chambre 
@main.route('/api/chambres', methods=['GET'])
def recuperation_chambres():
    chambres=Chambre.query.all()
    value=[]


    for chambre in chambres:
        value.append(
            {
                "id":chambre.id, 
                "numero":chambre.numero, 
                "type":chambre.type,  
                "prix":chambre.prix, 
            }
        )
            
    return jsonify(value)


#routes liste des chambre disponibles
@main.route('/api/chambres/disponibles', methods=['GET'])
def disponibles(date_arrive,date_depart,id):
    chambres=Chambre.query.all()
    value=[]
    date=request.json['date']


    for chambre in chambres:

        value.append(
            {
                "id":chambre.id, 
                "numero":chambre.numero, 
                "type":chambre.type,  
                "prix":chambre.prix, 
            }
        )
            
    return jsonify(value)



#routes creation des chambres
@main.route('/api/chambres', methods=['POST'])
def ajouter_chambre():
    numero=request.json['numero']
    type=request.json['type']
    prix=request.json['prix']

    new_chambre = Chambre(
        numero = numero,
        type = type,
        prix = prix
    )
    db.session.add(new_chambre)
    db.session.commit()
    return jsonify({'message':'Nouvelle chambre'})


#routes suppression chambre
@main.route('/api/chambres/<int:id>', methods=['DELETE'])
def chambre_annulation(id):
    chambre=Chambre.query.get_or_404(id)
    db.session.delete(chambre)
    db.session.commit()
    return jsonify({'message':'Chambre SUPPRIME'})


#routes uptade chambre
@main.route('/api/chambres/<int:id>', methods=['PUT'])
def changer_chambre(id):
    Chambre.query.get_or_404(id)

    numero=request.json['numero']
    if numero:
        Chambre.numero = numero
    
    type=request.json['type']
    if type:
        Chambre.type = type,
    
    prix=request.json['prix']
    if prix:
        Chambre.prix = prix,

    db.session.commit()
    return jsonify({'Chambre modifié'})

